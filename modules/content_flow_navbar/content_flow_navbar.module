<?php

/**
 * @file
 * Content Flow Navbar module file.
 */

/**
 * Implements hook_init().
 */
function content_flow_navbar_init() {
  global $theme_info;
  if ($theme_info->name != 'bootstrap') {
    if (empty($theme_info->base_themes) || !in_array('Bootstrap', $theme_info->base_themes)) {
      $path = drupal_get_path('module', 'content_flow_navbar');
      drupal_add_js($path . '/js/bootstrap.js');
      drupal_add_css($path . '/css/bootstrap.css');
      drupal_add_css($path . '/css/font-awesome.css');
    }
  }
}

/**
 * Implements hook_permission().
 */
function content_flow_navbar_permission() {
  return array(
    'access admin navbar' => array(
      'title' => t('Use the administration navbar'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function content_flow_navbar_theme($existing, $type, $theme, $path) {
  $items['navbar'] = array(
    'render element' => 'navbar',
    'template' => 'navbar',
    'path' => drupal_get_path('module', 'content_flow_navbar'),
  );
  $items['navbar_button_group'] = array(
    'render element' => 'navbar_button_group',
    'template' => 'navbar-button-group',
    'path' => drupal_get_path('module', 'content_flow_navbar'),
  );
  return $items;
}

/**
 * Implements hook_page_build().
 *
 * Add admin navbar to the page_top region automatically.
 */
function content_flow_navbar_page_build(&$page) {
  $page['page_top']['navbar'] = array(
    '#pre_render' => array('navbar_pre_render'),
    '#access' => user_access('access admin navbar'),
  );
}

/**
 * Prerender function for the navbar.
 *
 * Since building the navbar takes some time, it is done just prior to
 * rendering to ensure that it is built only if it will be displayed.
 */
function navbar_pre_render($navbar) {
  $navbar = array_merge($navbar, navbar_view());
  return $navbar;
}

/**
 * Implements hook_preprocess_html().
 *
 * Add some page classes, so global page theming can adjust to the navbar.
 */
function content_flow_navbar_preprocess_html(&$vars) {
  if (isset($vars['page']['page_top']['navbar']) && user_access('access admin navbar')) {
    $vars['classes_array'][] = 'navbar';
  }
}

/**
 * Implements template_preprocess_navbar().
 *
 * Adding the 'overlay-displace-top' class to the navbar pushes the overlay
 * down, so it appears below the navbar.
 */
function content_flow_navbar_preprocess_navbar(&$variables) {
  $variables['classes_array'][] = "overlay-displace-top";
}

/**
 * Implements hook_system_info_alter().
 *
 * Indicate that the 'page_top' region (in which the navbar will be displayed)
 * is an overlay supplemental region that should be refreshed whenever its
 * content is updated.
 *
 * This information is provided for any module that might need to use it, not
 * just the core Overlay module.
 */
function content_flow_navbar_system_info_alter(&$info, $file, $type) {
  if ($type == 'theme') {
    $info['overlay_supplemental_regions'][] = 'page_top';
  }
}

/**
 * Builds the admin menu as a structured array ready for drupal_render().
 *
 * @return
 *   Array of links and settings relating to the admin menu.
 */
function navbar_view() {
  global $user;
  $module_path = drupal_get_path('module', 'content_flow_navbar');
  $build = array(
    '#theme' => 'navbar',
    '#attached'=> array(
      'js' => array(
        $module_path . '/js/navbar.js',
        array(
          'data' => array('tableHeaderOffset' => 'Drupal.navbar.height'),
          'type' => 'setting'
        ),
      ),
      'css' => array(
        $module_path . '/css/content-flow-navbar.css',
      ),
    ),
  );

  // Enable language column if translation module is enabled or if we have any
  // node with language.
  $multilanguage = (module_exists('translation') || db_query_range("SELECT 1 FROM {node} WHERE language <> :language", 0, 1, array(':language' => LANGUAGE_NONE))->fetchField());
  if ($multilanguage) {
    $languages = language_list();
  }

  // Add logout & user account links or login link.
  $items = array();
  if ($user->uid) {
    $items['account mini'] = array(
      'icon' => 'user',
      'href' => '/user',
      'attributes' => array(
        'title' => t('User account'),
        'alt' => t('User account'),
        'class' => array('visible-xs', 'button-icon'),
      ),
    );
    $items['account full'] = array(
      'title' => t('Hello <strong>@username</strong>', array('@username' => format_username($user))),
      'href' => '/user',
      'attributes' => array(
        'title' => t('User account'),
        'alt' => t('User account'),
        'class' => array('hidden-xs', 'button-icon'),
      ),
    );

    // Build the content management section.
    $content_menu = array();
    if (_node_add_access()) {
      $content_menu['content management header'] = array(
        'title' => t('Site Content'),
        'type' => 'header'
      );
      $content_menu['content dashboard'] = array(
        'title' => t('Content Dashboard'),
        'href' => '/admin/content',
        'attributes' => array(
          'title' => t('Content Dashboard'),
          'alt' => t('Content Dashboard'),
        ),
      );
      $content_menu['create content'] = array(
        'title' => t('Create Content'),
        'href' => '/node/add',
        'attributes' => array(
          'title' => t('Add Content'),
          'alt' => t('Add Content'),
        ),
      );
      if (user_access('administer taxonomy')) {
        $content_menu['edit taxonomy'] = array(
          'title' => t('Edit Taxonomy'),
          'href' => '/admin/structure/taxonomy',
          'attributes' => array(
            'title' => t('Edit Taxonomy'),
            'alt' => t('Edit Taxonomy'),
          ),
        );
      }
    }
    // Build the local tasks for content management.
    $node = menu_get_object();
    if ($node) {
      $content_flow_managed = _content_flow_managed_type($node->type);
      $active_revisions = _content_flow_get_active_revisions($node->nid);
      $context = _content_flow_node_context();
      $content_menu['viewing mode divider'] = array(
        'type' => 'divider',
      );
      $node_status = ($node->status == 0) ? 'Unpublished' : 'Published';
      $content_menu['viewing mode header'] = array(
        'title' => t('Status: ' . $node_status),
        'type' => 'header'
      );
      if ($context == 'view' && $content_flow_managed) {
        // Build View Mode section
        $view_mode = _content_flow_get_current_view_mode($node);
        $view_mode_switch = ($view_mode == 'published') ? 'draft' : 'published';
        $view_mode_href = str_replace('//node', '/node', url('node/' . $node->nid, array('query' => array('view_mode' => $view_mode_switch))));
        $content_menu['viewing mode divider'] = array(
          'type' => 'divider',
        );
        $content_menu['viewing mode header'] = array(
          'title' => t('Viewing ' . $view_mode),
          'type' => 'header'
        );
        if (content_flow_node_working_draft($node) && $node->status == 1) {
          $content_menu['switch view mode'] = array(
            'title' => t('Switch to ' . $view_mode_switch),
            'href' => $view_mode_href,
            'attributes' => array(
              'title' => t('Switch to ' . $view_mode_switch),
              'alt' => t('Switch to ' . $view_mode_switch),
            ),
          );
        }
      }
      if (($context == 'edit' || $context == 'workflow') && count($active_revisions) >= 1) {
        $content_menu['viewing mode header']['title'] = t('View Content');
        foreach ($active_revisions as $revision) {
          if ($revision->state == 'published') {
            // Bug: For some reason l(), url(), drupal_get_path_alias() etc are returning
            //      an extra '/' for nodes that are published and have a draft. Silly
            //      workaround.
            $path = str_replace('//node', '/node', url('node/' . $node->nid, array('query' => array('view_mode' => 'published'))));
            $content_menu['view published'] = array(
              'title' => t('View Published'),
              'href' => $path,
              'attributes' => array(
                'title' => t('View Published'),
                'alt' => t('View Published'),
              ),
            );
            break;
          }
          if ($revision->state == 'draft' || $revision->state == 'needs review') {
            // Bug: For some reason l(), url(), drupal_get_path_alias() etc are returning
            //      an extra '/' for nodes that are published and have a draft. Silly
            //      workaround.
            $path = str_replace('//node', '/node', url('node/' . $node->nid, array('query' => array('view_mode' => 'draft'))));
            $content_menu['view draft'] = array(
              'title' => t('View Draft'),
              'href' => $path,
              'attributes' => array(
                'title' => t('View Draft'),
                'alt' => t('View Draft'),
              ),
            );
          }
        }
      }
      // Build Local Tasks section.
      $local_tasks = menu_local_tasks();
      $content_menu['local tasks divider'] = array(
        'type' => 'divider',
      );
      $content_menu['local task header'] = array(
        'title' => t('Manage Content'),
        'type' => 'header'
      );
      foreach ($local_tasks['tabs']['output'] as $local_task) {
        $content_menu[strtolower($local_task['#link']['title'])] = array(
          'title' => t($local_task['#link']['title']),
          'href' => '/' . $local_task['#link']['href'],
          'attributes' => array(
            'title' => t($local_task['#link']['title']),
            'alt' => t($local_task['#link']['title']),
          ),
        );
        $langcode = entity_language('node', $node);
        if ($multilanguage && !empty($languages[$langcode]->prefix)) {
          $content_menu[strtolower($local_task['#link']['title'])]['href'] = '/' . $languages[$langcode]->prefix . '/' . $local_task['#link']['href'];
        }
      }
    }
    if (count($content_menu > 0)) {
      $items['navbar_content_menu'] = array(
        'items' => $content_menu,
        'type' => 'button dropdown',
        'icon' => 'edit',
        'container classes' => 'dropdown',
        'attributes' => array(
          'title' => t('Manage Content'),
          'alt' => t('Manage Content'),
          'class' => array('button-icon'),
        ),
      );
    }
    // Build Drupal Admin Menu
    if (user_access('access administration pages')) {
      // Retrieve the admin menu from the database.
      $links = navbar_menu_navigation_links(navbar_get_menu_tree());
      $items['navbar_admin_menu'] = array(
        'items' => $links,
        'type' => 'button dropdown',
        'icon' => 'cog',
        'container classes' => 'dropdown',
        'attributes' => array(
          'title' => t('Administer Drupal'),
          'alt' => t('Administer Drupal'),
          'class' => array('button-icon'),
        ),
      );
    }
    $items['logout'] = array(
      'href' => '/user/logout',
      'icon' => 'sign-out',
      'attributes' => array(
        'title' => t('Sign out'),
        'alt' => t('Sign out'),
        'class' => array('signout-button', 'button-icon'),
      ),
    );
  }
  else {
    $items['account'] = array(
      'href' => 'user',
      'icon' => 'sign-in',
      'attributes' => array(
        'title' => t('Sign in'),
        'alt' => t('Sign in'),
        'class' => array('signin-button'),
      ),
    );
  }
  $build['navbar_right'] = array(
    '#theme' => 'navbar_button_group',
    '#items' => $items,
    '#attributes' => array(
      'id' => 'navbar-user',
      'class' => array('nav', 'navbar-nav', 'navbar-right'),
    ),
  );
  // Add a logo
  $build['navbar_logo'] = l(theme_image(array('path' => theme_get_setting('logo'), 'height' => '34px', 'attributes' => array())), '<front>', array('attributes' => array('id' => 'logo', 'class' => array('logo navbar-btn pull-left')), 'html' => TRUE));

  return $build;
}

function content_flow_navbar_preprocess_navbar_button_group(&$variables) {
  $items = array();
  foreach ($variables['navbar_button_group']['#items'] as $key => $item) {
    if (isset($item['type'])) {
      $variables['items'][$key] = content_flow_navbar_format_dropdown($item);
      continue;
    }
    $icon = isset($item['icon']) ? '<i class="fa fa-' . $item['icon'] . ' fa-lg fa-fw"></i> ' : NULL;
    $title = isset($item['title']) ? $item['title']: NULL;
    $variables['items'][$key]['content'] = '<a href="' . $item['href'] . '"' . drupal_attributes($item['attributes']) . '>' . $icon . $title . '</a>';
  }
}

function content_flow_navbar_format_dropdown($element) {
  $title = isset($element['title']) ? $element['title'] : NULL;
  $icon = isset($element['icon']) ? '<i class="fa fa-' . $element['icon'] . ' fa-lg fa-fw"></i> ' : NULL;
  $button_type = isset($element['button type']) ? $element['button type'] : 'btn-default';
  $button_dropdown = array();
  $button_dropdown['container classes'] = isset($element['container classes']) ? 'class="' . $element['container classes'] . '"' : NULL;
  $element['attributes']['classes'][] = 'dropdown-toggle';
  $button_dropdown['content'] = '<a href="#" data-toggle="dropdown"' . drupal_attributes($element['attributes']) . '>' . $icon . $title . '</a>';
  $button_dropdown['content'] .= '<ul class="dropdown-menu" role"menu">';
  foreach ($element['items'] as $item) {
    if (isset($item['type'])) {
      if ($item['type'] == 'header') {
        $button_dropdown['content'] .= '<li role="presentation" class="dropdown-header">' . $item['title'] . '</li>';
        continue;
      }
      if ($item['type'] == 'divider') {
        $button_dropdown['content'] .= '<li role="presentation" class="divider"></li>';
        continue;
      }
    }
    $button_dropdown['content'] .= '<li role="presentation"><a role="menuitem" tabindex="-1" href="' . $item['href'] . '"' . drupal_attributes($item['attributes']) . '>' . $item['title'] . '</a></li>';
  }
  $button_dropdown['content'] .= '</ul>';

  return $button_dropdown;
}

/**
 * Gets only the top level items below the 'admin' path.
 *
 * @return
 *   An array containing a menu tree of top level items below the 'admin' path.
 */
function navbar_get_menu_tree() {
  $tree = array();
  $admin_link = db_query('SELECT * FROM {menu_links} WHERE menu_name = :menu_name AND module = :module AND link_path = :path', array(':menu_name' => 'management', ':module' => 'system', ':path' => 'admin'))->fetchAssoc();
  if ($admin_link) {
    $tree = menu_build_tree('management', array(
      'expanded' => array($admin_link['mlid']),
      'min_depth' => $admin_link['depth'] + 1,
      'max_depth' => $admin_link['depth'] + 1,
    ));
  }

  return $tree;
}

/**
 * Generates a links array from a menu tree array.
 *
 * Based on menu_navigation_links(). Adds path based IDs and icon placeholders
 * to the links.
 *
 * @return
 *   An array of links as defined above.
 */
function navbar_menu_navigation_links($tree) {
  $links = array();
  $links['admin header'] = array(
    'type' => 'header',
    'title' => t('Administer Drupal'),
  );
  foreach ($tree as $item) {
    if (!$item['link']['hidden'] && $item['link']['access'] && ($item['link']['link_path'] != 'admin/content')) {
      // Make sure we have a path specific ID in place, so we can attach icons
      // and behaviors to the items.
      $id = str_replace(array('/', '<', '>'), array('-', '', ''), $item['link']['href']);

      $link = $item['link']['localized_options'];
      $link['href'] = '/' . $item['link']['href'];
      // Add icon placeholder.
      $link['title'] = '<span class="icon"></span>' . check_plain($item['link']['title']);
      // Add admin link ID.
      $link['attributes'] = array('id' => 'navbar-link-' . $id);
      if (!empty($item['link']['description'])) {
        $link['title'] .= ' <span class="element-invisible">(' . $item['link']['description'] . ')</span>';
        $link['attributes']['title'] = $item['link']['description'];
      }
      $link['html'] = TRUE;

      $class = ' path-' . $id;
      if (navbar_in_active_trail($item['link']['href'])) {
        $class .= ' active-trail';
      }
      $links['menu-' . $item['link']['mlid'] . $class] = $link;
    }
  }
  return $links;
}

/**
 * Checks whether an item is in the active trail.
 *
 * Useful when using a menu generated by menu_tree_all_data() which does
 * not set the 'in_active_trail' flag on items.
 *
 * @return
 *   TRUE when path is in the active trail, FALSE if not.
 *
 * @todo
 *   Look at migrating to a menu system level function.
 */
function navbar_in_active_trail($path) {
  $active_paths = &drupal_static(__FUNCTION__);

  // Gather active paths.
  if (!isset($active_paths)) {
    $active_paths = array();
    $trail = menu_get_active_trail();
    foreach ($trail as $item) {
      if (!empty($item['href'])) {
        $active_paths[] = $item['href'];
      }
    }
  }
  return in_array($path, $active_paths);
}

/**
 * Checks whether an item is in the active trail.
 *
 * Useful when using a menu generated by menu_tree_all_data() which does
 * not set the 'in_active_trail' flag on items.
 *
 * @return
 *   TRUE when path is in the active trail, FALSE if not.
 *
 * @todo
 *   Look at migrating to a menu system level function.
 */
function _content_flow_theme_events($state_flow, $node) {
  $events = $state_flow->get_available_events();
  $current_revision_actions = array();
  foreach ($events as $event_machine_name => $event) {
    if (state_flow_access($node, $event_machine_name)) {
      $current_revision_actions[] = l($event->get_option('label'), 'node/' . $node->nid . '/revisions/' . $node->vid . '/workflow/' . $event_machine_name);
    }
  }
  return implode(' | ', $current_revision_actions);
}
