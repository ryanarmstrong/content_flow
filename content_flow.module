<?php

/**
 * @file
 * Content Flow implementation of the State Flow module
 */

require_once 'inc/content_flow.activity.inc';

/**
 * Implements hook_menu().
 */
function content_flow_menu() {
  $module = drupal_get_path('module', 'content_flow');
  $items['admin/content/node/all-content'] = array(
    'title' => 'All Content',
    'description' => 'Show all content on the site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('content_flow_all_content_page'),
    'access arguments' => array('access content overview'),
    'file path' => $module . '/inc/',
    'file' => 'content_flow.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -3,
  );
  $items['admin/content/node/review'] = array(
    'title' => 'Needs Review',
    'description' => 'Show content that is in the review state.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('content_flow_needs_review_page'),
    'access arguments' => array('approve and reject content'),
    'file path' => $module . '/inc/',
    'file' => 'content_flow.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -4,
  );
  $items['admin/content/node/my-content'] = array(
    'title' => 'My Content',
    'description' => 'Show all content that is authored by the current user.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('content_flow_my_content_page'),
    'access arguments' => array('access content overview'),
    'file path' => $module . '/inc/',
    'file' => 'content_flow.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
  );
  $items['admin/content/node/my-content/add'] = array(
    'title' => 'Add content',
    'page callback' => 'content_flow_create_content',
    'access arguments' => array('access content overview'),
    'file path' => $module . '/inc/',
    'file' => 'content_flow.pages.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/content/node/all-content/add'] = array(
    'title' => 'Add content',
    'page callback' => 'content_flow_create_content',
    'access arguments' => array('access content overview'),
    'file path' => $module . '/inc/',
    'file' => 'content_flow.pages.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/content/node/review/add'] = array(
    'title' => 'Add content',
    'page callback' => 'content_flow_create_content',
    'access arguments' => array('access content overview'),
    'file path' => $module . '/inc/',
    'file' => 'content_flow.pages.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  // Content Flow Settings Pages
  $items['admin/config/content/content-flow'] = array(
    'title' => 'Content Flow',
    'description' => 'Content Flow settings.',
    'file path' => $module . '/inc/',
    'file' => 'content_flow.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('content_flow_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/content/content-flow/settings'] = array(
    'title' => 'Content Flow Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/content/content-flow/update-content'] = array(
    'title' => 'Update Content',
    'description' => 'Update existing content for Content Flow.',
    'file path' => $module . '/inc/',
    'file' => 'content_flow.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('content_flow_admin_update_content'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function content_flow_menu_alter(&$items) {
  unset($items['admin/content']);
  unset($items['admin/content/node']);
  $module = drupal_get_path('module', 'content_flow');
  $items['admin/content'] = array(
    'title' => 'Content Dashboard',
    'description' => 'Find and manage content.',
    'page callback' => 'content_flow_dashboard_page',
    'access arguments' => array('access content overview'),
    'weight' => -10,
    'file path' => $module . '/inc/',
    'file' => 'content_flow.pages.inc',
  );
  $items['admin/content/node'] = array(
    'title' => 'Content Dashboard',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // Remove the content revisions page that State Flow adds.
  unset($items['admin/content/content-revisions']);

  // Override the workflow page that State Flow provides.
  $items['node/%node/workflow'] = array(
    'title' => 'Workflow',
    'description' => 'Information about the workflow status of this content',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'content_flow_events',
    'page arguments' => array(1),
    'access callback' => 'state_flow_menu_node_access',
    'access arguments' => array(1),
    'weight' => 10,
    'file path' => $module . '/inc/',
    'file' => 'content_flow.pages.inc',
  );

  // Override the node/X page to ensure that the right revision is displayed.
  $items['node/%node']['page callback'] = 'content_flow_node_page_view_override';
  $items['node/%node']['type'] = MENU_CALLBACK;

  // Override the node/X/edit page to ensure that the right revision (most current) is displayed.
  $items['node/%node/edit']['page callback'] = 'content_flow_node_edit_page_override';

  // Override the node edit menu item title.
  $items['node/%node/edit']['title callback'] = 'content_flow_edit_tab_title';
  $items['node/%node/edit']['title arguments'] = array(1);

  // Override the node view menu item title.
  $items['node/%node/view']['title callback'] = 'content_flow_view_tab_title';
  $items['node/%node/view']['title arguments'] = array(1);
  $items['node/%node/view']['type'] = MENU_CALLBACK;

  // Remove uneeded routes.
  unset($items['node/%node/revisions']);
}

/**
 * Overrides the node/%/view page to ensure the proper revision is shown.
 *
 * @param $node
 *   The node being acted upon.
 * @return
 *   A node editing form.
 */
function content_flow_node_page_view_override($node) {
  if (_content_flow_managed_type($node->type)) {
    $query_parameters = drupal_get_query_parameters();
    if (!empty($query_parameters['view_mode'])) {
      $_SESSION['content_flow_view_mode'][$node->nid] = $query_parameters['view_mode'];
      drupal_goto('node/' . $node->nid);
    }
    // Load the appropriete view mode.
    if (!empty($_SESSION['content_flow_view_mode'][$node->nid]) && $_SESSION['content_flow_view_mode'][$node->nid] == 'draft') {
      $node = content_flow_node_latest_revision($node);
    }
  }
  // Ensure we have the editing code.
  module_load_include('inc', 'node', 'node.pages');
  return node_page_view($node);
}

/**
 * Overrides the node/%/edit page to ensure the proper revision is shown.
 *
 * @param $node
 *   The node being acted upon.
 * @return
 *   A node editing form.
 */
function content_flow_node_edit_page_override($node) {
  // Check to see if this is an existing node
  if (isset($node->nid) && _content_flow_managed_type($node->type)) {
    $node = content_flow_node_latest_revision($node);
  }
  // Ensure we have the editing code.
  module_load_include('inc', 'node', 'node.pages');
  return node_page_edit($node);
}

/**
 * Change the name of the node edit tab, conditionally.
 *
 * @param $node
 *   The node being acted upon.
 *
 * @return
 *   The title for the tab.
 */
function content_flow_edit_tab_title($node) {
  if (_content_flow_managed_type($node->type)) {
    if (content_flow_node_working_draft($node)) {
      return t('Edit draft');
    }
    return t('New draft');
  }
  return t('Edit');
}

/**
 * Change the name of the node edit tab, conditionally.
 *
 * @param $node
 *   The node being acted upon.
 *
 * @return
 *   The title for the tab.
 */
function content_flow_view_tab_title($node) {
  if (_content_flow_managed_type($node->type)) {
    if ($node->status == '1') {
      return t('View published');
    }
    return t('View draft');
  }
  return $node->title;
}

/**
 * Implements hook_permission().
 */
function content_flow_permission() {
  return array(
    'approve and reject content' => array(
      'title' => t('Approve and reject content'),
      'description' => t('Approve or reject content, tranisionting it to either the published or draft state.'),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_type().
 */
function content_flow_ctools_plugin_type() {
  $plugins = array(
    'plugins' => array(
      'cache' => TRUE,
      'use hooks' => TRUE,
      'info file' => TRUE,
      'alterable' => TRUE,
      'classes' => array('handler')
    ),
  );
  return $plugins;
}

/**
 * Implements hook_state_flow_plugins().
 */
function content_flow_state_flow_plugins() {
  $info = array();
  $path = drupal_get_path('module', 'content_flow') . '/plugins';
  $info['content_flow'] = array(
    'handler' => array(
      'class' => 'ContentFlow',
      'path' => $path,
      'file' => 'content_flow.inc',
    ),
  );
  return $info;
}

/**
 * Implements hook_state_flow_machine_type_alter().
 */
function content_flow_state_flow_machine_type_alter(&$machine_type, $node) {
  $machine_type = 'content_flow';
}

/**
 * Implements hook_node_insert().
 */
function content_flow_node_insert($node) {
  content_flow_activity_log($node, 'new_content');
}

/**
 * Implements hook_node_update().
 */
function content_flow_node_update($node) {
  content_flow_activity_log($node, 'updated_content');
}

/**
 * Implements hook_user_insert().
 */
function content_flow_user_insert($user) {
  content_flow_activity_log($user, 'new_user');
}

/**
 * Implements hook_user_update().
 */
function content_flow_user_update(&$edit, $account, $category) {
  $old_user = user_load($account->uid);
  // Compare the roles to see what was removed.
  if ($removed_roles = array_diff_key($old_user->roles, $account->roles)) {
    foreach ($removed_roles as $key => $removed_role) {
      content_flow_activity_log($account, 'updated_user_roles', array('removed_role' => $removed_role));
    }
  }

  // Compare the roles to see what was added.
  if ($added_roles = array_diff_key($account->roles, $old_user->roles)) {
    foreach ($added_roles as $key => $added_role) {
      $added_role = user_role_load($added_role);
      $added_role_name = $added_role->name;
      content_flow_activity_log($account, 'updated_user_roles', array('added_role' => $added_role_name));
    }
  }
}

/**
 * Implements hook_query_node_revision_alter().
 */
function content_flow_query_node_revision_alter(QueryAlterableInterface $query) {
  // Get the filter form the session.
  $filters = $query->getMetaData('filters');

  // Modify the query for the 'Status' filter.
  if ($filter = isset($filters['status']) ? $filters['status'] : NULL) {
    $query->condition('nrs.state', $filter);
  }

  // Modify the query for the 'Type' filter.
  if ($filter = isset($filters['type']) ? $filters['type'] : NULL) {
    $query->condition('n.type', $filter);
  }

  // Modify the query for the 'Author' filter.
  if ($filter = isset($filters['author']) ? $filters['author'] : NULL) {
    $query->condition('u.name', $filter);
  }

  // Modify the query for the 'Title' filter.
  if ($filter = isset($filters['title']) ? $filters['title'] : NULL) {
    $query->condition('n.title', '%' . $filter . '%', 'LIKE');
  }

  // Modify the query for the 'Language' filter.
  if ($filter = isset($filters['language']) ? $filters['language'] : NULL) {
    $query->condition('n.language', $filter);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function content_flow_form_node_form_alter(&$form, $form_state, $node) {
  if (_content_flow_managed_type($form['#node']->type)) {
    // Take control of new revision and published settings. Only Content Flow
    // should be able to set/alter these.
    $form['revision_information']['revision'] = array(
      '#type' => 'value',
      '#value' => TRUE,
    );
    $states = state_flow_get_revisions($form['nid']['#value']);
    foreach ($states as $state) {
      if ($state->vid == $form['vid']['#value'] && ($state->state == 'draft' || $state->state == 'needs review')) {
        $form['revision_information']['revision']['#value'] = FALSE;
      }
    }
    $form['options']['status'] = array(
      '#type' => 'value',
      '#value' => FALSE,
    );
    // Move the revision log into the publishing options.
    if ($form['options']['#access']) {
      $form['options']['log'] = $form['revision_information']['log'];
      unset($form['revision_information']['log']);

      // The revision information section should now be empty.
      $form['revision_information']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_url_outbound_alter().
 */
function content_flow_url_outbound_alter(&$path, &$options, $original_path) {
  // Instead of pointing to node/[nid]/revisions/[vid]/view, point to node/[nid]/draft.
  // TO-DO: This prevents viewing old revisions. This should be corrected.
  if (preg_match('|^node/([0-9]*)/revisions/([0-9]*)/view(/.*)?|', $path, $matches)) {
    $path = 'node/' . $matches[1];
  }
  // Instead of pointing to node/[nid]/revisions/[vid]/edit, point to node/[nid]/edit.
  if (preg_match('|^node/([0-9]*)/revisions/([0-9]*)/edit(/.*)?|', $path, $matches)) {
    $path = 'node/' . $matches[1] . '/edit';
  }
}

/**
 * Returns wheter or not there is a working draft for a node.
 *
 * @param $node
 *   The node being acted upon.
 * @return boolean
 *   TRUE if there is a working draft, otherwise returns FALSE.
 */
function content_flow_node_working_draft($node) {
  $states = state_flow_get_revisions($node->nid);
  foreach ($states as $state) {
    if ($state->status == '1' && ($state->state == 'draft' || $state->state == 'needs review')) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Helper function to return the latest published or working draft of a node.
 *
 * @param $node
 *   The node being acted upon.
 * @return
 *   A node editing form.
 */
function content_flow_node_latest_revision($node) {
  $states = state_flow_get_revisions($node->nid);
  foreach ($states as $state) {
    if (($state->state == 'draft' || $state->state == 'needs review') && $state->status == '1') {
      $node = node_load($node->nid, $state->vid);
    }
  }
  return $node;
}

/**
 * Checks if the user can view the current node revision.
 *
 * This is the access callback for node/%node/draft as defined in
 * workbench_moderation_menu().
 *
 * @param $node
 *   The node being acted upon.
 *
 * @return
 *   Booelan TRUE or FALSE.
 */
function content_flow_access_current_draft($node) {
  // Don't show if there is a working draft.
  if (content_flow_node_working_draft($node) && $node->status == '1') {
    return TRUE;
  }
  return FALSE;
}

function content_flow_update_content($batch_mode = FALSE) {
  // Truncate the Content Flow tables if they exist
  $trucate_tables = array(
    'node_revision_states',
    'node_revision_states_history',
  );
  foreach ($trucate_tables as $table) {
    if (db_table_exists($table)) {
      $result = db_truncate($table)->execute();
    }
  }

  if ($batch_mode) {
    $batch = array(
      'title' => t('Updating existing content for Content Flow'),
      'operations' => array(
        array('_content_flow_update_content_batch_operation', array()),
      ),
      'finished' => '_content_flow_update_content_batch_finished'
    );
    batch_set($batch);
  }
  else {
    // Create records for existing node revisions in in NVIDIA Flow module.
    $revisions = db_query("SELECT {node_revision}.vid, {node_revision}.nid, {node_revision}.uid, {node_revision}.timestamp, {node}.vid AS active_revision, {node}.status FROM {node_revision} INNER JOIN {node} ON {node_revision}.nid = {node}.nid WHERE {node_revision}.vid > :vid ORDER BY {node_revision}.vid ASC", array(':vid' => $current_vid));
    foreach ($revisions as $revision) {
      // Create the Content Flow entries for this revision.
      _content_flow_create_revision_entries($revision);
    }
  }
  return TRUE;
}

/**
 * Performs batch operation for content_flow_update_content().
 *
 * This is a multistep operation: we go through all revisions by packs of 20. The
 * batch processing engine interrupts processing and sends progress feedback
 * after 1 second execution time.
 *
 * @param array $context
 *   An array of contextual key/value information for rebuild batch process.
 */
function _content_flow_update_content_batch_operation(&$context) {
  if (empty($context['sandbox'])) {
    // Initiate multistep processing.
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_revision'] = 0;
    $context['sandbox']['max'] = db_query('SELECT COUNT(DISTINCT vid) FROM {node_revision}')->fetchField();
  }

  // Process the next 20 revisions.
  $limit = 20;
  // Create records for existing node revisions in in NVIDIA Flow module.
  $revisions = db_query_range("SELECT {node_revision}.vid, {node_revision}.nid, {node_revision}.uid, {node_revision}.timestamp, {node}.vid AS active_revision, {node}.status FROM {node_revision} INNER JOIN {node} ON {node_revision}.nid = {node}.nid WHERE {node_revision}.vid > :vid ORDER BY {node_revision}.vid ASC", 0, $limit, array(':vid' => $context['sandbox']['current_revision']));
  foreach ($revisions as $revision) {
    // Create the Content Flow entries for this revision.
    _content_flow_create_revision_entries($revision);

    $context['sandbox']['progress']++;
    $context['sandbox']['current_revision'] = $revision->vid;
  }

  // Multistep processing : report progress.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Performs post-processing for node_access_rebuild().
 *
 * @param bool $success
 *   A boolean indicating whether the re-build process has completed.
 * @param array $results
 *   An array of results information.
 * @param array $operations
 *   An array of function calls (not used in this function).
 */
function _content_flow_update_content_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('The content has been updated for Content Flow.'));
  }
  else {
    drupal_set_message(t('The content update for Content Flow failed. It is recommended that you attemtp to run this update again.'), 'error');
  }
  cache_clear_all();
}

/**
 * Helper function for content_flow_update_content().
 *
 * @param bool $success
 *   A boolean indicating whether the re-build process has completed.
 * @param array $results
 *   An array of results information.
 * @param array $operations
 *   An array of function calls (not used in this function).
 */
function _content_flow_create_revision_entries($revision) {
  $state = 'unpublished';
  $status = 0;
  $node_revisions_log = 'System Update: This is an retired revision.';

  // Check to see if the revision is the currently active one.
  if ($revision->vid == $revision->active_revision) {
    // This is the latest revision in the node table.
    $status = 1;
    $node_revisions_log = 'System Update: This is the current, but unpublished revision.';
    // Now check to see if the node is published.
    if ($revision->status == 1) {
      // This revision is published.
      $state = 'published';
      $node_revisions_log = 'System Update: This is the current, and published revision.';
    }
  }

  // Create node_revision_states record for this revision.
  $node_revision_states = db_insert('node_revision_states')
  ->fields(array(
    'vid' => $revision->vid,
    'nid' => $revision->nid,
    'state' => $state,
    'status' => $status,
    'timestamp' => $revision->timestamp,
  ))
  ->execute();

  // Create node_revision_states_history for this revision.
  $node_revision_states_history = db_insert('node_revision_states_history')
  ->fields(array(
    'vid' => $revision->vid,
    'nid' => $revision->nid,
    'state' => $state,
    'timestamp' => $revision->timestamp,
    'uid' => $revision->nid,
    'log' => $node_revisions_log,
  ))
  ->execute();
}

/**
 * Checks whether you are viewing a node page.
 *
 * @return
 *   TRUE when path is in the active trail, FALSE if not.
 */
function _content_flow_is_node_page() {
  if (menu_get_object()) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Returns which context you are viewing a node (view/edit/workflow).
 *
 * @return string
 *   Returns the context in which you are viewing the node.
 */
function _content_flow_node_context() {
  // Check if the context is viewing a node.
  if ((arg(0) == 'node' && is_numeric(arg(1)) && empty(arg(2))) || ((arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'view'))) {
    return 'view';
  }
  // Check if the context is editing a node.
  if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit') {
    return 'edit';
  }
  // Check if the context is viewing a nodes workflow.
  if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'workflow') {
    return 'workflow';
  }
}

/**
 * Returns the active revisions for a node.
 *
 * @param int $nid
 *   The node id of the node to return the active revisions for.
 *
 * @return array
 *   An array of active revisions.
 */
function _content_flow_get_active_revisions($nid) {
  $active_revisions = array();
  $result = db_query("SELECT nid, vid, state, timestamp FROM {node_revision_states} WHERE status = 1 AND nid = :nid", array(':nid' => $nid));
  $active_revisions = $result->fetchAll();
  return $active_revisions;
}

/**
 * Returns the active view mode for a node.
 *
 * @param int $nid
 *   The node id of the node to return the active revisions for.
 *
 * @return array
 *   An array of active revisions.
 */
function _content_flow_get_current_view_mode($node) {
  // If a view mode hasn't been set, set one.
  if (empty($_SESSION['content_flow_view_mode'][$node->nid])) {
    $_SESSION['content_flow_view_mode'][$node->nid] = ($node->status == 1) ? 'published' : 'draft';
  }
  return $_SESSION['content_flow_view_mode'][$node->nid];
}

/**
 * Returns the content types that are being moderated by Content Flow.
 *
 * @return array
 */
function _content_flow_get_active_content_types() {
  $active_content_types = array();
  foreach (node_type_get_types() as $content_type) {
    if (variable_get('content_flow_active_' . $content_type->type) == 1) {
      $active_content_types[] = $content_type->type;
    }
  }
  return $active_content_types;
}

/**
 * Returns whether or not a content type is being managed by Content Flow.
 *
 * @return boolean
 *   Returns TRUE is the content type us being managed by Content Flow.
 */
function _content_flow_managed_type($type) {
  if (in_array($type, _content_flow_get_active_content_types())) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Returns whether or not there are content types not being managed by Content Flow.
 *
 * @return boolean
 *   Returns TRUE if there are content types not being managed by Content Flow.
 */
function _content_flow_unmanaged_content_types() {
  return (count(node_type_get_types()) != count(_content_flow_get_active_content_types()));
}
