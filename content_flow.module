<?php

/**
 * @file
 * Content Flow implementation of the State Flow module
 */

require_once 'inc/content_flow.activity.inc';

/**
 * Implements hook_menu().
 */
function content_flow_menu() {
  $module = drupal_get_path('module', 'content_flow');
  $items['admin/content/node/all-content'] = array(
    'title' => 'All Content',
    'description' => 'Show all content on the site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('content_flow_all_content_page'),
    'access arguments' => array('access content overview'),
    'file path' => $module . '/inc/',
    'file' => 'content_flow.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -3,
  );
  $items['admin/content/node/review'] = array(
    'title' => 'Needs Review',
    'description' => 'Show content that is in the review state.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('content_flow_needs_review_page'),
    'access arguments' => array('approve and reject content'),
    'file path' => $module . '/inc/',
    'file' => 'content_flow.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -4,
  );
  $items['admin/content/node/my-content'] = array(
    'title' => 'My Content',
    'description' => 'Show all content that is authored by the current user.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('content_flow_my_content_page'),
    'access arguments' => array('access content overview'),
    'file path' => $module . '/inc/',
    'file' => 'content_flow.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
  );
  $items['admin/content/node/my-content/add'] = array(
    'title' => 'Add content',
    'page callback' => 'content_flow_create_content',
    'access arguments' => array('access content overview'),
    'file path' => $module . '/inc/',
    'file' => 'content_flow.pages.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/content/node/all-content/add'] = array(
    'title' => 'Add content',
    'page callback' => 'content_flow_create_content',
    'access arguments' => array('access content overview'),
    'file path' => $module . '/inc/',
    'file' => 'content_flow.pages.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/content/node/review/add'] = array(
    'title' => 'Add content',
    'page callback' => 'content_flow_create_content',
    'access arguments' => array('access content overview'),
    'file path' => $module . '/inc/',
    'file' => 'content_flow.pages.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  // View the current draft of a node.
  $items["node/%node/draft"] = array(
    'title' => 'View draft',
    'page callback' => 'content_flow_node_view_draft',
    'page arguments' => array(1),
    'access callback' => 'content_flow_access_current_draft',
    'access arguments' => array(1),
    'file path' => $module . '/inc/',
    'file' => 'content_flow.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -9,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function content_flow_menu_alter(&$items) {
  unset($items['admin/content']);
  unset($items['admin/content/node']);
  $module = drupal_get_path('module', 'content_flow');
  $items['admin/content'] = array(
    'title' => 'Content Dashboard',
    'description' => 'Find and manage content.',
    'page callback' => 'content_flow_dashboard_page',
    'access arguments' => array('access content overview'),
    'weight' => -10,
    'file path' => $module . '/inc/',
    'file' => 'content_flow.pages.inc',
  );
  $items['admin/content/node'] = array(
    'title' => 'Content Dashboard',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // Remove the content revisions page that State Flow adds.
  unset($items['admin/content/content-revisions']);

  // Override the workflow page that State Flow provides.
  $items['node/%node/workflow'] = array(
    'title' => 'Workflow',
    'description' => 'Information about the workflow status of this content',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'content_flow_events',
    'page arguments' => array(1),
    'access callback' => 'state_flow_menu_node_access',
    'access arguments' => array(1),
    'weight' => 10,
    'file path' => $module . '/inc/',
    'file' => 'content_flow.pages.inc',
  );

  // Override the node/X/edit page to ensure that the right revision (most current) is displayed.
  $items['node/%node/edit']['page callback'] = 'content_flow_node_edit_page_override';
  $items['node/%node/edit']['file path'] = $module . '/inc/';
  $items['node/%node/edit']['file'] = 'content_flow.pages.inc';

  // Override the node edit menu item title.
  $items['node/%node/edit']['title callback'] = 'content_flow_edit_tab_title';
  $items['node/%node/edit']['title arguments'] = array(1);

  // Override the node view menu item title.
  $items['node/%node/view']['title callback'] = 'content_flow_view_tab_title';
  $items['node/%node/view']['title arguments'] = array(1);
}

/**
 * Implements hook_permission().
 */
function content_flow_permission() {
  return array(
    'approve and reject content' => array(
      'title' => t('Approve and reject content'),
      'description' => t('Approve or reject content, tranisionting it to either the published or draft state.'),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_type().
 */
function content_flow_ctools_plugin_type() {
  $plugins = array(
    'plugins' => array(
      'cache' => TRUE,
      'use hooks' => TRUE,
      'info file' => TRUE,
      'alterable' => TRUE,
      'classes' => array('handler')
    ),
  );
  return $plugins;
}

/**
 * Implements hook_state_flow_plugins().
 */
function content_flow_state_flow_plugins() {
  $info = array();
  $path = drupal_get_path('module', 'content_flow') . '/plugins';
  $info['content_flow'] = array(
    'handler' => array(
      'class' => 'ContentFlow',
      'path' => $path,
      'file' => 'content_flow.inc',
    ),
  );
  return $info;
}

/**
 * Implements hook_state_flow_machine_type_alter().
 */
function content_flow_state_flow_machine_type_alter(&$machine_type, $node) {
  $machine_type = 'content_flow';
}

/**
 * Implements hook_node_insert().
 */
function content_flow_node_insert($node) {
  content_flow_activity_log($node, 'new_content');
}

/**
 * Implements hook_node_update().
 */
function content_flow_node_update($node) {
  content_flow_activity_log($node, 'updated_content');
}

/**
 * Implements hook_user_insert().
 */
function content_flow_user_insert($user) {
  content_flow_activity_log($user, 'new_user');
}

/**
 * Implements hook_user_update().
 */
function content_flow_user_update(&$edit, $account, $category) {
  $old_user = user_load($account->uid);
  // Compare the roles to see what was removed.
  if ($removed_roles = array_diff_key($old_user->roles, $account->roles)) {
    foreach ($removed_roles as $key => $removed_role) {
      content_flow_activity_log($account, 'updated_user_roles', array('removed_role' => $removed_role));
    }
  }

  // Compare the roles to see what was added.
  if ($added_roles = array_diff_key($account->roles, $old_user->roles)) {
    foreach ($added_roles as $key => $added_role) {
      $added_role = user_role_load($added_role);
      $added_role_name = $added_role->name;
      content_flow_activity_log($account, 'updated_user_roles', array('added_role' => $added_role_name));
    }
  }
}

/**
 * Implements hook_query_node_revision_alter().
 */
function content_flow_query_node_revision_alter(QueryAlterableInterface $query) {
  // Get the filter form the session.
  $filters = $query->getMetaData('filters');

  // Modify the query for the 'Status' filter.
  if ($filter = isset($filters['status']) ? $filters['status'] : NULL) {
    $query->condition('nrs.state', $filter);
  }

  // Modify the query for the 'Type' filter.
  if ($filter = isset($filters['type']) ? $filters['type'] : NULL) {
    $query->condition('n.type', $filter);
  }

  // Modify the query for the 'Author' filter.
  if ($filter = isset($filters['author']) ? $filters['author'] : NULL) {
    $query->condition('u.name', $filter);
  }

  // Modify the query for the 'Title' filter.
  if ($filter = isset($filters['title']) ? $filters['title'] : NULL) {
    $query->condition('n.title', '%' . $filter . '%', 'LIKE');
  }

  // Modify the query for the 'Language' filter.
  if ($filter = isset($filters['language']) ? $filters['language'] : NULL) {
    $query->condition('n.language', $filter);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function content_flow_form_node_form_alter(&$form, $form_state) {
  // Uncheck the 'new revision' box if we are editing a revision that is in draft.
  // This prevents a bunch of revisions being created that aren't needed.
  $form['revision_information']['revision']['#attributes'] = array('style' => array('display:none'));
  $form['revision_information']['revision']['#title'] = '';
  $form['options']['status']['#attributes'] = array('style' => array('display:none'));
  $form['options']['status']['#title'] = '';
  $states = state_flow_get_revisions($form['nid']['#value']);
  foreach ($states as $state) {
    if ($state->vid == $form['vid']['#value'] && ($state->state == 'draft' || $state->state == 'needs review')) {
      $form['revision_information']['revision']['#default_value'] = FALSE;
    }
  }
}

/**
 * Implements hook_url_outbound_alter().
 */
function content_flow_url_outbound_alter(&$path, &$options, $original_path) {
  // Instead of pointing to node/[nid]/revisions/[vid]/view, point to node/[nid]/draft.
  if (preg_match('|^node/([0-9]*)/revisions/([0-9]*)/view(/.*)?|', $path, $matches)) {
    $path = 'node/' . $matches[1] . '/draft';
  }
  // Instead of pointing to node/[nid]/revisions/[vid]/edit, point to node/[nid]/edit.
  if (preg_match('|^node/([0-9]*)/revisions/([0-9]*)/edit(/.*)?|', $path, $matches)) {
    $path = 'node/' . $matches[1] . '/edit';
  }
}

/**
 * Change the name of the node edit tab, conditionally.
 *
 * @param $node
 *   The node being acted upon.
 *
 * @return
 *   The title for the tab.
 */
function content_flow_edit_tab_title($node) {
  if (content_flow_node_working_draft($node)) {
    return t('Edit draft');
  }
  return t('New draft');
}

/**
 * Change the name of the node edit tab, conditionally.
 *
 * @param $node
 *   The node being acted upon.
 *
 * @return
 *   The title for the tab.
 */
function content_flow_view_tab_title($node) {
  if ($node->status == '1') {
    return t('View published');
  }
  return t('View draft');
}

/**
 * Helper function to determin if there is a working draft of a node
 *
 * @param $node
 *   The node being acted upon.
 * @return
 *   A node editing form.
 */
function content_flow_node_working_draft($node) {
  $states = state_flow_get_revisions($node->nid);
  foreach ($states as $state) {
    if ($state->status == '1' && ($state->state == 'draft' || $state->state == 'needs review')) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Helper function to return the latest published or working draft of a node.
 *
 * @param $node
 *   The node being acted upon.
 * @return
 *   A node editing form.
 */
function content_flow_node_latest_revision($node) {
  $states = state_flow_get_revisions($node->nid);
  foreach ($states as $state) {
    if (($state->state == 'draft' || $state->state == 'needs review') && $state->status == '1') {
      $node = node_load($node->nid, $state->vid);
    }
  }
  return $node;
}

/**
 * Checks if the user can view the current node revision.
 *
 * This is the access callback for node/%node/draft as defined in
 * workbench_moderation_menu().
 *
 * @param $node
 *   The node being acted upon.
 *
 * @return
 *   Booelan TRUE or FALSE.
 */
function content_flow_access_current_draft($node) {
  // Don't show if there is a working draft.
  if (content_flow_node_working_draft($node) && $node->status == '1') {
    return TRUE;
  }
  return FALSE;
}
